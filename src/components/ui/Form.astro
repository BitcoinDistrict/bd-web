---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';
import { getSubmitUrl, googleContactForm } from '~/data/contactus';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;
const submitUrl = getSubmitUrl();

// Map form field names to Google Forms entry IDs
const getEntryId = (fieldName: string) => {
  return googleContactForm.entryIds[fieldName as keyof typeof googleContactForm.entryIds] || fieldName;
};

// Derive sensible autocomplete defaults based on field name/type
const deriveAutocompleteToken = (fieldName: string, inputType: string): string => {
  const normalized = (fieldName || '').toLowerCase().trim();

  if (inputType === 'email' || normalized === 'email') return 'email';

  if (
    inputType === 'tel' ||
    normalized === 'phone' ||
    normalized === 'phone number' ||
    normalized === 'telephone' ||
    normalized === 'tel' ||
    normalized === 'mobile'
  ) {
    return 'tel';
  }

  if (normalized === 'name' || normalized === 'full name' || normalized === 'fullname') return 'name';
  if (normalized === 'first name' || normalized === 'firstname' || normalized === 'given-name') return 'given-name';
  if (normalized === 'last name' || normalized === 'lastname' || normalized === 'family-name') return 'family-name';
  if (normalized === 'organization' || normalized === 'organisation' || normalized === 'company') return 'organization';

  return 'on';
};

// Convert a field name like "first_name" or "phone number" to a human-friendly placeholder
const humanizeFieldName = (fieldName: string): string => {
  const cleaned = (fieldName || '').replace(/[._-]+/g, ' ').trim();
  return cleaned
    .split(' ')
    .filter(Boolean)
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(' ');
};
---

<form id="contact-form" method="POST" action={submitUrl} target="hidden_iframe">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete, placeholder = '' }) =>
          name && (
            <div class="mb-6 sm:mb-5">
              {(() => {
                const effectiveAutocomplete = autocomplete ?? deriveAutocompleteToken(name, type);
                const effectivePlaceholder = placeholder || label || humanizeFieldName(name);
                const accessibleLabel = label || humanizeFieldName(name);
                return (
                  <input
                    type={type}
                    name={getEntryId(name)}
                    id={name}
                    autocomplete={effectiveAutocomplete}
                    placeholder={effectivePlaceholder}
                    aria-label={accessibleLabel}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-800"
                  />
                );
              })()}
            </div>
          )
      )
  }

  {
    textarea && (
      <div class="mb-6 sm:mb-5">
        <textarea
          id="textarea"
          name={getEntryId(textarea.name ? textarea.name : 'message')}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder || textarea.label || 'Message'}
          aria-label={textarea.label || 'Message'}
          autocomplete="off"
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-800"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit" id="submit-button">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400" set:html={description} />
      </div>
    )
  }
</form>

<!-- Hidden iframe for Google Forms submission -->
<iframe name="hidden_iframe" id="hidden_iframe" style="display:none;"></iframe>

<script>
  function handleFormSuccess() {
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    if (submitButton) {
      submitButton.textContent = 'Thanks for your message!';
      submitButton.style.backgroundColor = '#10b981'; // Green color
      submitButton.style.borderColor = '#10b981';
      submitButton.disabled = true;
    }
  }

  // Handle form submission
  const form = document.getElementById('contact-form') as HTMLFormElement;
  if (form) {
    form.addEventListener('submit', function(e) {
      // Show immediate feedback
      const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
      if (submitButton) {
        submitButton.textContent = 'Sending...';
        submitButton.disabled = true;
      }
      
      // Trigger success state after a short delay to simulate form processing
      setTimeout(() => {
        handleFormSuccess();
      }, 2000);
    });
  }
</script>
