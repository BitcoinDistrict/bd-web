---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import type { Meetup } from '~/types';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  meetups: Meetup[];
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string | Record<string, string>>;
  bg?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  meetups = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Center the map on Washington DC
const centerLat = 38.9072;
const centerLng = -77.0369;
const zoom = 8;

// Pre-process meetup data for better performance
const mapData = {
  center: [centerLat, centerLng],
  zoom,
  markers: meetups.map(meetup => ({
    lat: meetup.location.latitude,
    lng: meetup.location.longitude,
    title: meetup.title,
    description: meetup.description,
    location: meetup.location.name,
    url: meetup.meetupUrl
  }))
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={(classes?.headline as Record<string, string>) ?? {}} />
  
  <div class="relative w-full">
    <!-- Map container with loading state -->
    <div class="relative">
      <div id="meetups-map" class="w-full h-96 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 opacity-0 transition-opacity duration-300"></div>
      
      <!-- Loading state -->
      <div id="map-loading" class="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-800 rounded-lg">
        <div class="text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto mb-2"></div>
          <p class="text-sm text-gray-600 dark:text-gray-400">Loading map...</p>
        </div>
      </div>
      
      <!-- Error state (hidden by default) -->
      <div id="map-error" class="absolute inset-0 hidden items-center justify-center bg-gray-100 dark:bg-gray-800 rounded-lg">
        <div class="text-center">
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Unable to load interactive map</p>
          <button id="retry-map" class="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors">
            Retry
          </button>
        </div>
      </div>
    </div>
    
    <!-- Optimized Map Script with lazy loading and error handling -->
    <script is:inline type="module" define:vars={{ mapData: JSON.stringify(mapData) }}>
      let mapInitialized = false;
      let observer;
      
      // Parse the serialized map data
      const parsedMapData = JSON.parse(mapData);
      
      // Function to load CSS dynamically
      function loadCSS(href) {
        return new Promise((resolve, reject) => {
          const link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = href;
          link.onload = resolve;
          link.onerror = reject;
          document.head.appendChild(link);
        });
      }
      
      // Function to initialize the map
      async function initializeMap() {
        if (mapInitialized) return;
        
        const mapContainer = document.getElementById('meetups-map');
        const loadingElement = document.getElementById('map-loading');
        const errorElement = document.getElementById('map-error');
        
        try {
          // Load CSS and JS in parallel
          const [, L] = await Promise.all([
            loadCSS('https://unpkg.com/leaflet@1.9.4/dist/leaflet.css'),
            import('https://unpkg.com/leaflet@1.9.4/dist/leaflet-src.esm.js')
          ]);
          
          // Initialize the map with optimized settings
          const map = L.map('meetups-map', {
            scrollWheelZoom: false,
            zoomControl: true,
            attributionControl: true,
            preferCanvas: true // Better performance for many markers
          }).setView(parsedMapData.center, parsedMapData.zoom);
          
          // Enable scroll wheel zoom on click, disable on mouse leave
          map.on('click', () => map.scrollWheelZoom.enable());
          map.on('mouseout', () => map.scrollWheelZoom.disable());
          
          // Add tile layer with optimized settings
          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19,
            updateWhenIdle: true,
            keepBuffer: 2
          }).addTo(map);
          
          // Create optimized Bitcoin icon with inline styles as fallback
          const bitcoinIcon = L.divIcon({
            html: `<div style="background: #f7931a; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3); font-size: 16px;">â‚¿</div>`,
            className: 'custom-bitcoin-icon',
            iconSize: [30, 30],
            iconAnchor: [15, 15],
            popupAnchor: [0, -15]
          });
          
          // Add markers efficiently
          if (parsedMapData.markers && parsedMapData.markers.length > 0) {
            parsedMapData.markers.forEach((markerData, index) => {
              try {
                const marker = L.marker([markerData.lat, markerData.lng], {
                  icon: bitcoinIcon
                }).addTo(map);
                
                // Create popup content with better escaping
                const popupContent = `
                  <div class="max-w-xs">
                    <h3 class="font-semibold text-lg mb-2">
                      <a href="${markerData.url}" target="_blank" rel="noopener noreferrer" 
                         class="text-blue-900 hover:text-blue-700 transition-colors">
                        ${markerData.title}
                      </a>
                    </h3>
                    <p class="text-sm text-gray-600 mb-2">${markerData.description}</p>
                    <p class="text-xs text-gray-500">${markerData.location}</p>
                  </div>
                `;
                
                marker.bindPopup(popupContent, {
                  maxWidth: 300,
                  autoPan: true
                });
              } catch (error) {
                console.error(`Error creating marker ${index + 1}:`, error);
              }
            });
          } else {
            console.error('No markers data available:', parsedMapData);
          }
          
          // Show map and hide loading
          loadingElement.style.display = 'none';
          mapContainer.style.opacity = '1';
          mapInitialized = true;
          
        } catch (error) {
          console.error('Failed to load map:', error);
          loadingElement.style.display = 'none';
          errorElement.style.display = 'flex';
        }
      }
      
      // Retry functionality
      document.getElementById('retry-map')?.addEventListener('click', () => {
        const loadingElement = document.getElementById('map-loading');
        const errorElement = document.getElementById('map-error');
        
        errorElement.style.display = 'none';
        loadingElement.style.display = 'flex';
        mapInitialized = false;
        initializeMap();
      });
      
      // Intersection Observer for lazy loading
      if ('IntersectionObserver' in window) {
        observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && !mapInitialized) {
              initializeMap();
              observer.unobserve(entry.target);
            }
          });
        }, {
          rootMargin: '100px' // Start loading 100px before map becomes visible
        });
        
        const mapContainer = document.getElementById('meetups-map');
        if (mapContainer) {
          observer.observe(mapContainer);
        }
      } else {
        // Fallback for browsers without IntersectionObserver
        initializeMap();
      }
    </script>
    
    <!-- Optimized CSS for map icons -->
    <style>
      .custom-bitcoin-icon {
        background: transparent !important;
        border: none !important;
      }
      
      .bitcoin-marker {
        background: #f7931a;
        color: white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        font-size: 16px;
      }
      
      .bitcoin-marker:hover {
        transform: scale(1.1);
        transition: transform 0.2s ease;
      }
    </style>
  </div>
</WidgetWrapper>