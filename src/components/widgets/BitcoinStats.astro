---
// Bitcoin Stats Widget - Live data from CoinGecko API
import { Icon } from 'astro-icon/components';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`bitcoin-stats-widget ${className}`}>
  <!-- Mobile Layout: Single column with horizontal cards -->
  <div class="md:hidden space-y-3 max-w-sm mx-auto">
    <!-- Bitcoin Price Card -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-4 border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <Icon name="tabler:currency-bitcoin" class="w-6 h-6 text-orange-500 flex-shrink-0" />
          <div>
            <div class="text-lg font-bold text-gray-900 dark:text-white" id="bitcoin-price-mobile">
              Loading...
            </div>
            <div class="text-xs font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
              Bitcoin Price
            </div>
          </div>
        </div>
        <div class="text-xs text-right" id="price-change-mobile">
          <span class="price-change-indicator-mobile"></span>
        </div>
      </div>
    </div>

    <!-- Bitcoin Hashrate Card -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-4 border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center space-x-3">
        <Icon name="tabler:cpu" class="w-6 h-6 text-blue-500 flex-shrink-0" />
        <div>
          <div class="text-lg font-bold text-gray-900 dark:text-white" id="bitcoin-hashrate-mobile">
            Loading...
          </div>
          <div class="text-xs font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
            Network Hashrate
          </div>
        </div>
      </div>
    </div>

    <!-- Halving Progress Card -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-4 border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center space-x-3 mb-2">
        <Icon name="tabler:hourglass" class="w-6 h-6 text-purple-500 flex-shrink-0" />
        <div>
          <div class="text-lg font-bold text-gray-900 dark:text-white" id="halving-progress-mobile">
            Loading...
          </div>
          <div class="text-xs font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
            Until Halving
          </div>
        </div>
      </div>
      <div class="w-full bg-gray-300 dark:bg-gray-700 rounded-full h-1.5">
        <div class="bg-purple-500 h-1.5 rounded-full transition-all duration-500" id="halving-bar-mobile" style="width: 0%"></div>
      </div>
    </div>

    <!-- Bitcoin Dominance Card -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-4 border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center space-x-3">
        <Icon name="tabler:chart-pie" class="w-6 h-6 text-green-500 flex-shrink-0" />
        <div>
          <div class="text-lg font-bold text-gray-900 dark:text-white" id="bitcoin-dominance-mobile">
            Loading...
          </div>
          <div class="text-xs font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
            Bitcoin Dominance
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Desktop/Tablet Layout: 4-column grid -->
  <div class="hidden md:grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
    <!-- Bitcoin Price -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center justify-center mx-auto mb-3 text-orange-500">
        <Icon name="tabler:currency-bitcoin" class="w-8 h-8" />
      </div>
      <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1" id="bitcoin-price">
        Loading...
      </div>
      <div class="text-sm font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
        Bitcoin Price (USD)
      </div>
      <div class="text-xs mt-1" id="price-change">
        <span class="price-change-indicator"></span>
      </div>
    </div>

    <!-- Bitcoin Hashrate -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center justify-center mx-auto mb-3 text-blue-500">
        <Icon name="tabler:cpu" class="w-8 h-8" />
      </div>
      <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1" id="bitcoin-hashrate">
        Loading...
      </div>
      <div class="text-sm font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
        Network Hashrate
      </div>
    </div>

    <!-- Halving Progress -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center justify-center mx-auto mb-3 text-purple-500">
        <Icon name="tabler:hourglass" class="w-8 h-8" />
      </div>
      <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1" id="halving-progress">
        Loading...
      </div>
      <div class="text-sm font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
        Until Next Halving
      </div>
      <div class="w-full bg-gray-300 dark:bg-gray-700 rounded-full h-2 mt-3">
        <div class="bg-purple-500 h-2 rounded-full transition-all duration-500" id="halving-bar" style="width: 0%"></div>
      </div>
    </div>

    <!-- Bitcoin Dominance -->
    <div class="bg-white/10 dark:bg-gray-800/20 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 dark:border-gray-700/30">
      <div class="flex items-center justify-center mx-auto mb-3 text-green-500">
        <Icon name="tabler:chart-pie" class="w-8 h-8" />
      </div>
      <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1" id="bitcoin-dominance">
        Loading...
      </div>
      <div class="text-sm font-medium uppercase tracking-wide text-gray-600 dark:text-gray-400">
        Bitcoin Dominance
      </div>
    </div>
  </div>
</div>

<script>
  class BitcoinStatsWidget {
    constructor() {
      this.init();
      this.startUpdating();
    }

    async init() {
      await this.updateStats();
    }

    async updateStats() {
      try {
        await Promise.all([
          this.updateBitcoinPrice(),
          this.updateHashrate(),
          this.updateHalvingProgress(),
          this.updateBitcoinDominance()
        ]);
      } catch (error) {
        console.error('Error updating Bitcoin stats:', error);
      }
    }

    async updateBitcoinPrice() {
      try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd&include_24hr_change=true&include_market_cap=true');
        const data = await response.json();
        
        const price = data.bitcoin.usd;
        const change = data.bitcoin.usd_24h_change;
        
        // Update desktop elements
        const priceElement = document.getElementById('bitcoin-price');
        const changeElement = document.getElementById('price-change');
        
        // Update mobile elements
        const priceElementMobile = document.getElementById('bitcoin-price-mobile');
        const changeElementMobile = document.getElementById('price-change-mobile');
        
        const formattedPrice = `$${price.toLocaleString()}`;
        
        if (priceElement) {
          priceElement.textContent = formattedPrice;
        }
        if (priceElementMobile) {
          priceElementMobile.textContent = formattedPrice;
        }
        
        if (changeElement) {
          const changeIndicator = changeElement.querySelector('.price-change-indicator');
          if (changeIndicator) {
            const isPositive = change >= 0;
            changeIndicator.textContent = `${isPositive ? '+' : ''}${change.toFixed(2)}% (24h)`;
            changeIndicator.className = `price-change-indicator ${isPositive ? 'text-green-500' : 'text-red-500'}`;
          }
        }
        
        if (changeElementMobile) {
          const changeIndicatorMobile = changeElementMobile.querySelector('.price-change-indicator-mobile');
          if (changeIndicatorMobile) {
            const isPositive = change >= 0;
            changeIndicatorMobile.textContent = `${isPositive ? '+' : ''}${change.toFixed(2)}%`;
            changeIndicatorMobile.className = `price-change-indicator-mobile ${isPositive ? 'text-green-500' : 'text-red-500'}`;
          }
        }
      } catch (error) {
        console.error('Error fetching Bitcoin price:', error);
        const priceElement = document.getElementById('bitcoin-price');
        const priceElementMobile = document.getElementById('bitcoin-price-mobile');
        if (priceElement) {
          priceElement.textContent = 'Error';
        }
        if (priceElementMobile) {
          priceElementMobile.textContent = 'Error';
        }
      }
    }

    async updateHashrate() {
      try {
        // Using blockchain.info API for hashrate data
        const response = await fetch('https://blockchain.info/q/hashrate');
        const hashrateGH = await response.text();
        
        // Convert from GH/s to EH/s (Exahashes per second)
        const hashrateEH = (parseFloat(hashrateGH) / 1000000000).toFixed(0);
        const formattedHashrate = `${hashrateEH} EH/s`;
        
        // Update desktop element
        const hashrateElement = document.getElementById('bitcoin-hashrate');
        // Update mobile element
        const hashrateElementMobile = document.getElementById('bitcoin-hashrate-mobile');
        
        if (hashrateElement) {
          hashrateElement.textContent = formattedHashrate;
        }
        if (hashrateElementMobile) {
          hashrateElementMobile.textContent = formattedHashrate;
        }
      } catch (error) {
        console.error('Error fetching hashrate:', error);
        const hashrateElement = document.getElementById('bitcoin-hashrate');
        const hashrateElementMobile = document.getElementById('bitcoin-hashrate-mobile');
        if (hashrateElement) {
          hashrateElement.textContent = 'Error';
        }
        if (hashrateElementMobile) {
          hashrateElementMobile.textContent = 'Error';
        }
      }
    }

    async updateHalvingProgress() {
      try {
        // Get current block height from blockchain.info
        const response = await fetch('https://blockchain.info/q/getblockcount');
        const currentBlock = parseInt(await response.text());
        
        // Calculate halving progress
        const blocksPerHalving = 210000;
        const lastHalvingBlock = Math.floor(currentBlock / blocksPerHalving) * blocksPerHalving;
        const nextHalvingBlock = lastHalvingBlock + blocksPerHalving;
        const blocksUntilHalving = nextHalvingBlock - currentBlock;
        const progressPercent = ((currentBlock - lastHalvingBlock) / blocksPerHalving) * 100;
        
        // Estimate time until halving (approximately 10 minutes per block)
        const minutesUntilHalving = blocksUntilHalving * 10;
        const daysUntilHalving = Math.floor(minutesUntilHalving / (60 * 24));
        
        // Update desktop elements
        const progressElement = document.getElementById('halving-progress');
        const progressBar = document.getElementById('halving-bar');
        
        // Update mobile elements
        const progressElementMobile = document.getElementById('halving-progress-mobile');
        const progressBarMobile = document.getElementById('halving-bar-mobile');
        
        let formattedProgress;
        if (daysUntilHalving > 365) {
          const years = Math.floor(daysUntilHalving / 365);
          const remainingDays = daysUntilHalving % 365;
          formattedProgress = `~${years}y ${remainingDays}d`;
        } else {
          formattedProgress = `~${daysUntilHalving} days`;
        }
        
        if (progressElement) {
          progressElement.textContent = formattedProgress;
        }
        if (progressElementMobile) {
          progressElementMobile.textContent = formattedProgress;
        }
        
        const progressWidth = `${Math.min(progressPercent, 100)}%`;
        if (progressBar) {
          progressBar.style.width = progressWidth;
        }
        if (progressBarMobile) {
          progressBarMobile.style.width = progressWidth;
        }
      } catch (error) {
        console.error('Error fetching halving data:', error);
        const progressElement = document.getElementById('halving-progress');
        const progressElementMobile = document.getElementById('halving-progress-mobile');
        if (progressElement) {
          progressElement.textContent = 'Error';
        }
        if (progressElementMobile) {
          progressElementMobile.textContent = 'Error';
        }
      }
    }

    async updateBitcoinDominance() {
      try {
        // Get global crypto market data from CoinGecko
        const response = await fetch('https://api.coingecko.com/api/v3/global');
        const data = await response.json();
        
        const dominancePercent = data.data.market_cap_percentage.btc;
        const formattedDominance = `${dominancePercent.toFixed(1)}%`;
        
        // Update desktop element
        const dominanceElement = document.getElementById('bitcoin-dominance');
        // Update mobile element
        const dominanceElementMobile = document.getElementById('bitcoin-dominance-mobile');
        
        if (dominanceElement) {
          dominanceElement.textContent = formattedDominance;
        }
        if (dominanceElementMobile) {
          dominanceElementMobile.textContent = formattedDominance;
        }
      } catch (error) {
        console.error('Error fetching Bitcoin dominance:', error);
        const dominanceElement = document.getElementById('bitcoin-dominance');
        const dominanceElementMobile = document.getElementById('bitcoin-dominance-mobile');
        if (dominanceElement) {
          dominanceElement.textContent = 'Error';
        }
        if (dominanceElementMobile) {
          dominanceElementMobile.textContent = 'Error';
        }
      }
    }

    startUpdating() {
      // Update every 5 minutes
      setInterval(() => {
        this.updateStats();
      }, 5 * 60 * 1000);
    }
  }

  // Initialize the widget when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    new BitcoinStatsWidget();
  });

  // Also initialize if the script runs after DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new BitcoinStatsWidget();
    });
  } else {
    new BitcoinStatsWidget();
  }
</script>

<style>
  .bitcoin-stats-widget {
    animation: fadeInUp 0.8s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .price-change-indicator,
  .price-change-indicator-mobile {
    font-weight: 600;
  }
</style>